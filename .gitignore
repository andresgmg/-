#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.

#   For a library or package, you might want to ignore these files since the code is

#   However, in case of collaboration, if having platform-specific dependencies or dependencies

#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.

#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.

#   This is especially recommended for binary packages to ensure reproducibility, and is more

#   commonly ignored for libraries.

#   having no cross-platform support, pipenv may install dependencies that don't work, or not

#   https://pdm.fming.dev/#use-with-ide

#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control

#   in version control.

#   install all needed dependencies.

#   intended to run in multiple environments; otherwise, check them in:

#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it

#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can

#  Usually these files are written by a python script from a template

#  and can be added to the global gitignore or merged into this file.  For a more nuclear

#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore

#  before PyInstaller builds the exe, so as to inject date/other infos into it.

#  option (not recommended) you can uncomment the following to ignore the entire idea folder.

# .python-version

# Byte-compiled / optimized / DLL files

# C extensions

# Celery stuff

# Cython debug symbols

# Distribution / packaging

# Django stuff:

# Environments

# Flask stuff:

# IPython

# Installer logs

# Jupyter Notebook

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm

# PyBuilder

# PyCharm

# PyInstaller

# Pyre type checker

# Reflex

# Rope project settings

# SageMath parsed files

# Scrapy stuff:

# Sphinx documentation

# Spyder project settings

# Translations

# Unit test / coverage reports

# mkdocs documentation

# mypy

# pdm

# pipenv

# poetry

# pyenv

# pytype static type analyzer

#.idea/

#Pipfile.lock

#pdm.lock

#poetry.lock

*$py.class

*.cover

*.db

*.egg

*.egg-info/

*.log

*.manifest

*.mo

*.pot

*.py,cover

*.py[cod]

*.sage.py

*.so

*.spec

.Python

.cache

.coverage

.coverage.*

.dmypy.json

.eggs/

.env

.hypothesis/

.installed.cfg

.ipynb_checkpoints

.mypy_cache/

.nox/

.pdm.toml

.pybuilder/

.pyre/

.pytest_cache/

.pytype/

.ropeproject

.scrapy

.spyderproject

.spyproject

.tox/

.venv

.web

.webassets-cache

/site

ENV/

MANIFEST

__pycache__/

__pypackages__/

build/

celerybeat-schedule

celerybeat.pid

cover/

coverage.xml

cython_debug/

db.sqlite3

db.sqlite3-journal

develop-eggs/

dist/

dmypy.json

docs/_build/

downloads/

eggs/

env.bak/

env/

htmlcov/

instance/

ipython_config.py

lib/

lib64/

local_settings.py

nosetests.xml

parts/

pip-delete-this-directory.txt

pip-log.txt

portfolio-env/

profile_default/

sdist/

share/python-wheels/

target/

var/

venv.bak/

venv/

wheels/

### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

# Optional stylelint cache

# SvelteKit build / generate output
.svelte-kit